<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Ardias</title>
    <link>https://agilfchx.github.io/posts/</link>
    <description>Recent content in Posts on Ardias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2023 12:47:54 +0700</lastBuildDate><atom:link href="https://agilfchx.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Level 4 - Telephone</title>
      <link>https://agilfchx.github.io/posts/level4-telephone/</link>
      <pubDate>Sun, 10 Sep 2023 12:47:54 +0700</pubDate>
      
      <guid>https://agilfchx.github.io/posts/level4-telephone/</guid>
      <description>Pada level kali ini kita diberikan source code smart contractnya seperti berikut
// SPDX-License-Identifier: MIT pragma solidity ^0.8.0; contract Telephone { address public owner; constructor() { owner = msg.sender; } function changeOwner(address _owner) public { if (tx.origin != msg.sender) { owner = _owner; } } } Goals : Mendapatkan ownership dari contract level ini
Breaking the code Pada smart contract ini hanya terdapat satu function saja yaitu changeOwner(_owner)
function changeOwner(address _owner) public { if (tx.</description>
    </item>
    
    <item>
      <title>Level 3 - Coin Flip</title>
      <link>https://agilfchx.github.io/posts/level3-coinflip/</link>
      <pubDate>Sat, 02 Sep 2023 22:16:12 +0700</pubDate>
      
      <guid>https://agilfchx.github.io/posts/level3-coinflip/</guid>
      <description>Hai! Kembali lagi ke series belajar ethernaut, kita akan melanjutkan Level 3 yaitu Coin Flip. Lesgoo!
Pada level kali ini kita diberikan source code seperti berikut
// SPDX-License-Identifier: MIT pragma solidity ^0.8.0; contract CoinFlip { uint256 public consecutiveWins; uint256 lastHash; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968; constructor() { consecutiveWins = 0; } function flip(bool _guess) public returns (bool) { uint256 blockValue = uint256(blockhash(block.number - 1)); if (lastHash == blockValue) { revert(); } lastHash = blockValue; uint256 coinFlip = blockValue / FACTOR; bool side = coinFlip == 1 ?</description>
    </item>
    
    <item>
      <title>Level 2 - Fallout</title>
      <link>https://agilfchx.github.io/posts/level2-fallout/</link>
      <pubDate>Fri, 25 Aug 2023 22:22:43 +0700</pubDate>
      
      <guid>https://agilfchx.github.io/posts/level2-fallout/</guid>
      <description>Haloo kita lanjutkan kembali series ethernaut ini di Level 2 yaitu Fallout, Lesgo!
Pada level kali ini kita diberikan source code dari smart contractnya sebagai berikut
// SPDX-License-Identifier: MIT pragma solidity ^0.6.0; import &amp;#39;openzeppelin-contracts-06/math/SafeMath.sol&amp;#39;; contract Fallout { using SafeMath for uint256; mapping (address =&amp;gt; uint) allocations; address payable public owner; /* constructor */ function Fal1out() public payable { owner = msg.sender; allocations[owner] = msg.value; } modifier onlyOwner { require( msg.sender == owner, &amp;#34;caller is not the owner&amp;#34; ); _; } function allocate() public payable { allocations[msg.</description>
    </item>
    
    <item>
      <title>Level 1 - Fallback</title>
      <link>https://agilfchx.github.io/posts/level1-fallback/</link>
      <pubDate>Fri, 18 Aug 2023 23:14:53 +0700</pubDate>
      
      <guid>https://agilfchx.github.io/posts/level1-fallback/</guid>
      <description>Hello Readers!
Kita akan melanjutkan series Ethernaut ini dan kita akan bermain di level 1 yaitu Fallback
Pada level kali ini tidak seperti sebelumnya kita langsung diberikan sebuah source code smart contract nya untuk menyelesaikan level ini, berikut adalah source codenya
// SPDX-License-Identifier: MIT pragma solidity ^0.8.0; contract Fallback { mapping(address =&amp;gt; uint) public contributions; address public owner; constructor() { owner = msg.sender; contributions[msg.sender] = 1000 * (1 ether); } modifier onlyOwner { require( msg.</description>
    </item>
    
    <item>
      <title>Level 0 - Hello Ethernaut</title>
      <link>https://agilfchx.github.io/posts/level0-hello-ethernaut/</link>
      <pubDate>Fri, 18 Aug 2023 23:14:44 +0700</pubDate>
      
      <guid>https://agilfchx.github.io/posts/level0-hello-ethernaut/</guid>
      <description>Hee ya ðŸ‘‹
Pada post kali ini saya akan memulai dari Level 0 yaitu Hello Ethernaut
Di level ini kita akan diberitahu bagaimana cara bermain di Ethernaut, tanpa panjang lebar mari kita mulai saja
Start Untuk memulai kita klik Get new instance terlebih dahulu untuk memulai level ini. Nanti akan muncul sebuah pop up confirm transaction dari Metamask dan itu bisa langsung saja klik Confirm.
Jika terjadi error seperti berikut ini, coba import account menggunakan private key lain dan jangan lupa di connect an ke site nya Setelah klik Get new instance maka tampilan nya akan berubah dan akan ada button Submit instance.</description>
    </item>
    
    <item>
      <title>Setup Ethernaut</title>
      <link>https://agilfchx.github.io/posts/setup-ethernaut/</link>
      <pubDate>Fri, 18 Aug 2023 23:14:30 +0700</pubDate>
      
      <guid>https://agilfchx.github.io/posts/setup-ethernaut/</guid>
      <description>Halo semuanya, jadi pada post pertama ini saya akan membagikan cara untuk setup Ethernaut secara lokal (Linux).
Jadi sebelum kita melakukan setup, saya akan membagikan beberapa versi tools dan software yang saya gunakan untuk bermain di Ethernaut yang dapat berjalan di lokal saya yaitu:
Node.js v18.17.1 NPM v9.8.1 yarn git Steps Clone repo dan install dependencies git clone https://github.com/OpenZeppelin/ethernaut.git &amp;amp;&amp;amp; yarn install Setelah terinstall, jalankan ganache atau rpc servernya pada folder ethernaut yarn network Lanjut kita akan melakukan installasi Metamask sesuai browser yang digunakan Setelah Metamask terinstall, selanjutnya kita akan menambahkan network baru dengan klik pada bagian pojok kiri atas lalu klik Add Network dan setelah di klik pilih Add Network Manually Isi kolom yang kosong menjadi seperti berikut dan untuk Network name bebas diisi sesuai kemauan kalian Setelah itu kita akan memasukkan akun yang dari Ganache, jadi kita memerlukan private key yang ada pada output Ganache di terminal Untuk Import Account yang ada di Ganache ini kita bisa klik Account 1 atau yang bagian atas yang paling tengah, lalu akan nanti akan muncul sebuah poppup dan pilih Import account Masukkan private key yang sudah di copy dari Ganache ke kolom berikut ini, lalu Import Tampilan jika berhasil melakukan import account</description>
    </item>
    
  </channel>
</rss>
